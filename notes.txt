create reduction rules special for printing nice names and incorporate them into repl

document the reduction rule and ingredient specification languages
- reduction rule syntax, especially the lhs. explain the kind of info the type_checker works with
- qualified ingredient variable and how it has to do with inheritance. include that things always count as inheriting themselves
- mixture reduction rule syntax
- ingredient specification: name, abstract, inherit being special
- the --- to separate ingdts in same file
- keywords like None and filename that shouldn't be used in ingredients
- idea of abstract ingdts as ones that will never show up
- idea of multiple inheritance and overridding order
- descriptions of the various actions that can go into ingdt attributes and the keywords that can go with them (like SELF with yield)


It's a little weird that tags for ingredients are done via inheritance and tags for modifiers are decalred with rules.

I feel like reduction rules do too much of the work, and ingredient definitions do barely anything

Thoughts...
- more action effect attributes like gain_mod and yield to take some of the work from reduction rules
- maybe put some reduction rule info directly into the ingredient def in the form of attributes?
  like maybe what happens when mixed with water can be an attribute?
- A mixes_into attribute that says that when you have a mixture with the thing then it goes into the other thing?
- Perhaps an absorbs attribute in the opposite direction? Like Dough should absorb Sugar, or most things really
- Maybe certain attributes on ingredients can automatically be converted into reduction rules on parsing?
- Maybe modifiers can have specification system just like ingredients, with tags working like inheritance, and with attributes driving reduction.
  maybe we can do away with reduction rules if that ends up being good
- Or we can do nothing but reduction rules! Inheritance of ingredients is replaced by declared tags just like for modifiers.
  The reduction rule language can be extended to allow for ingredient declarations and responses to boiled, fried, etc.
  Actions by user always take on modifiers like cook_boil 

Here's an example of something I don't like:
The abstract ing FlavorRich is defined just to group things,
but what it actually does is in reduction rules (near soup stuff), which is
far away from its definition and hard to find.

---

Besides what attributes matter for underlying cooking logic (i.e. the stuff that can be explored in interactive.py),
there are the following attributes to think about:
- pointer to resources that help with drawing the ingredient
- information about what preingredients can generate the ingredient
- information about what tools can be used to make actions happen to the ingredient (e.g. you need a blender to "mush" certain things)

---

ideas for actual gameplay:
- achievements (with no "obligation") for various fully prepared recipes
- you are a cook who is hired by a restaurant to improve their menu, which starts out somehow crappy
- in each game, the customers have a randomly generated taste distribution, which is secret
- each day of the game, you gather ingredients and cook some dishes and they are added to the restaurant's menu to replace their least popular dishes
- each day you see the previous day's feedback in the form of reviews on a yelp-like system
- your goal is to improve these reviews before the end of your contract with the restaurant
- at the end, the menu is fixed, and the endgame screen is a few days of reviews, along with your average star rating
- would be cool to use some kind of language model to generate reviews of a particular star rating, seeded with the foods that are liked/disliked on the menu
- ingredients are gathered from: your garden, your pantry, the supermarket, the farmer, the woods
- that was all weekday mode. weekend mode is more chill: you have your own craving, which is not secret. you can try to make something that meets your craving, or just do w/e.




